# Copyright (c) Open Enclave SDK contributors.
# Licensed under the MIT License.

check_submodule_not_empty("${PROJECT_SOURCE_DIR}/3rdparty/tcmalloc/gperftools")

if (NOT OE_SGX)
  return()
endif ()

# oesnmalloc depends on musl_includes and libcxx_includes.
# However specifying those external projects as dependencies does not seem to
# work. Build of oesnmalloc is launched while musl_includes is being built.
# This likely a cmake/ninja bug. Depending on oelibc_includes (which is an
# INTERFACE library that depends on musl_includes) also does not work.
# To ensure that musl_includes and libcxx_includes external projects are
# completed before oesnmalloc is built, we use the custom command below
# that depends on the external projects. The custom command copies header
# files generated by the external projects to oesnmalloc's binary directory.
# oesnmalloc lists the copied header files as sources.
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/deprecations.h
         ${CMAKE_CURRENT_BINARY_DIR}/__config.h
  COMMAND
    ${CMAKE_COMMAND} -E copy
    ${PROJECT_BINARY_DIR}/output/include/openenclave/libc/bits/deprecations.h
    ${CMAKE_CURRENT_BINARY_DIR}/deprecations.h
  COMMAND ${CMAKE_COMMAND} -E copy ${LIBCXX_INCLUDES}/__config
          ${CMAKE_CURRENT_BINARY_DIR}/__config.h
  DEPENDS musl_includes libcxx_includes)

set(SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/gperftools/src)
set(SOURCES
    ${SOURCE_DIR}/common.cc
    ${SOURCE_DIR}/internal_logging.cc
    ${SOURCE_DIR}/system-alloc.cc
    ${SOURCE_DIR}/central_freelist.cc
    ${SOURCE_DIR}/tcmalloc.cc
    ${SOURCE_DIR}/page_heap.cc
    ${SOURCE_DIR}/sampler.cc
    ${SOURCE_DIR}/span.cc
    ${SOURCE_DIR}/stack_trace_table.cc
    ${SOURCE_DIR}/static_vars.cc
    ${SOURCE_DIR}/symbolize.cc
    ${SOURCE_DIR}/thread_cache.cc
    ${SOURCE_DIR}/malloc_extension.cc
    ${SOURCE_DIR}/malloc_hook.cc
    ${SOURCE_DIR}/maybe_threads.cc
    ${SOURCE_DIR}/base/spinlock.cc
    ${SOURCE_DIR}/../enclave/sgx.c)

add_enclave_library(oetcmalloc STATIC ${SOURCES} deprecations.h __config.h
                    allocator.cpp)

enclave_link_libraries(oetcmalloc PRIVATE oe_includes)

enclave_compile_options(
  oetcmalloc
  PRIVATE
  -DHAVE_CONFIG_H
  -DNO_TCMALLOC_SAMPLES
  -DNO_TCMALLOC_SAMPLES
  -DNO_HEAP_CHECK
  -DNDEBUG
  -ffreestanding
  -Wall
  -Wno-error
  -Wwrite-strings
  -Woverloaded-virtual
  -Wno-sign-compare
  -fno-builtin-malloc
  -fno-builtin-free
  -fno-builtin-realloc
  -fno-builtin-calloc
  -fno-builtin-cfree
  -fno-builtin-memalign
  -fno-builtin-posix_memalign
  -fno-builtin-valloc
  -fno-builtin-pvalloc
  -Wno-unused-result
  -fsized-deallocation
  -faligned-new
  -DNO_FRAME_POINTER
  -Wno-sign-conversion
  -Wno-error
  -Wno-unused-local-typedefs
  -ftls-model=local-exec
  -fno-exceptions
  -nostdinc
  -nostdinc++
  -I${SOURCE_DIR}
  -I${CMAKE_CURRENT_SOURCE_DIR}/gperftools/enclave/gen
  $<$<COMPILE_LANGUAGE:CXX>:-I${LIBCXX_INCLUDES}>
  -I${PROJECT_BINARY_DIR}/output/include/openenclave/libc
  -fPIE
  -DPIC)

enclave_link_libraries(oetcmalloc PUBLIC oelibcxx)

maybe_build_using_clangw(oetcmalloc)
