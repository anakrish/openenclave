#!/bin/sh

# URL to fetch alpine root fs from About 2.5 MB download.
ALPINE_ROOTFS_URL="https://dl-cdn.alpinelinux.org/alpine/v3.13/\
releases/x86_64/alpine-minirootfs-3.13.1-x86_64.tar.gz"

# Use a recent version of proot. With older versions, apk would
# report messages like "2 errors", that are innocuous, but catch
# the eye.
PROOT_URL="https://gitlab.com/proot/proot/-/jobs/981080842/\
artifacts/download?file_type=archive"

# Name of the folder where root filesystem will be extracted to.
ALPINE_FS="alpine-fs"

APORTS_BRANCH=3.13-stable

BUILDER=user

# Figure out the user's home folder. If the command is executed
# as sudo, then we use $SUDO_USER's home folder and not the
# root's home folder.
if [ ! -z "$SUDO_USER" ]; then
  HOME_DIR=/home/${SUDO_USER}
else
  HOME_DIR=~
fi

APKMAN_DIR=${HOME_DIR}/.apkman
CURRENT_DIR=`pwd`

print_usage()
{
  usage="\
apkman -  package manager and development environment for enclaves.
          version 0.1a, alpine-linux 3.13, proot v5.2.0-alpha-8c0ccf7d

apkman uses \`proot\` to manage multiple user-space installations of alpine-linux.
Alpine linux exists as a normal directory on the host machine and thus headers
and libraries can be transparently used to build enclaves on the host machine.
apkman also sets up the a development environment for fine-tuning and building
packages specifically for enclaves. Use this development environment if you want
to use specific a specific compiler (e.g clang) or specific compiler flags 
(e.g -mspeculative-load-hardening) or want to turn-off certain features 
(e.g HAVE_MONOTONIC_CLOCK) to make a package more appropriate for your enclave.
You can also build your enclaves entirely within this environment and use it on
your host machine.

Links:
Open Enclave SDK  : https://openenclave.io/sdk/
Proot             : https://proot-me.github.io/
Alpine Linux Wiki : https://wiki.alpinelinux.org/wiki/Main_Page
Building Packages : https://wiki.alpinelinux.org/wiki/Abuild_and_Helpers
Package Search    : https://pkgs.alpinelinux.org/packages
Search Contents   : https://pkgs.alpinelinux.org/contents

usage: apkman COMMAND [<ARGUMENTS>]

Package installation and removal:
  search     Search for packages matching given patterns.
             E.g:
                apkman search sqlite quickjs
             Hint: Search for static and dev versions of libraries.
             Hint: Use the \`Search Contents\` link above to find out what package
                   contains the header/library files you are looking for.
  add        Install packages
             E.g:
                apkman add sqlite-static sqlite-dev 
                apkman add quickjs 
  del        Remove given packages.
             
Using packages:
  root       The root folder of this alpine-linux instance. Header and library paths
             can be specified relative to the root path.
             E.g: 
             Specify header paths to compiler:
                -I \`apkman root\`/usr/include/c++/10.2.1 -I \`apkman root\`/usr/include
             Specify library paths to linker:
                -L \`apkman root\`/usr/lib

Building packages:
  build-init Set up the environment for building packages. This needs to be done once
             per apkman instance. apkman will install compilers and tools (build-base)
             for building packages. Additionally it will clone the Alpine aports
             repository to /apkbuild/aports directory. This repository contains the 
             recipe for building each package.
  prepare    Fetch the sources for a given package and prepare it for building.
  build      Build a given package. 
             Build artifacts are copied to /apkbuild/pkgs folder.
	     Specify 
                 -L \`apkman root\`/apkbuild/pkgs/usr/lib
             to the linker to find the custom built version of the package.

Execute commands:
 -c          Execute the given command. This is useful for scripting as well as
             to executing a command without entering the shell.
             E.g:
                 apkman -c ls /usr/include

Development:
 shell      Enter the Alpine linux install using proot.
            This environment is ideal for package management, and development.
            Almost everything works in this environment with the notable exception of
            GDB. For that use chroot.
 chroot     Enter the Alpine linux install using chroot. This requires root access.
            Use this when the proot environment is not sufficient.

Help:
 help       Print usage.
"

  echo "$usage"
}

ensure_apkman_dir()
{
   mkdir -p "$APKMAN_DIR" && cd "$APKMAN_DIR"
   if [ ! -z "$SUDO_USER" ]; then
     chown $SUDO_USER:$SUDO_USER $APKMAN_DIR
   fi
}

ensure_dependencies()
{
   BINS="tar unzip wget"
   for bin in $BINS; do
     if ! command -v "$bin" > /dev/null; then
       echo "${bin} not found. Install [${BINS}] to proceed."
       exit 1
     fi
   done

   export PATH=./dist:$PATH
   if ! command -v dist/proot > /dev/null; then
     wget "${PROOT_URL}" -O proot.zip
     unzip proot.zip
   fi
}

enter_chroot()
{
    mount --bind /dev     "${ALPINE_FS}/dev"
    mount --bind /dev/pts "${ALPINE_FS}/dev/pts"
    mount --bind /dev/shm "${ALPINE_FS}/dev/shm"
    mount --bind /proc    "${ALPINE_FS}/proc"
    mount --bind /sys     "${ALPINE_FS}/sys"
    export PS1="apkman chroot \w# "
    sudo chroot "${ALPINE_FS}" /bin/sh
    umount --recursive "${ALPINE_FS}/dev"
    umount --recursive "${ALPINE_FS}/proc"
    umount --recursive "${ALPINE_FS}/sys"
}

proot_exec()
{
  export SHELL=/bin/sh
  export TERM=xterm-256color
  export PS1="apkman \w$ "
  proot -b /dev -b /dev/pts -b /proc -b /sys -b /dev/shm \
        -0 \
        -r alpine-fs \
        -w / \
        "$@"
}

setup_alpine_fs()
{
  if ! test -d "${ALPINE_FS}"; then
    wget "$ALPINE_ROOTFS_URL" -O alpine-minirootfs.tar.gz
    sh -c "mkdir -p tmp && cd tmp && tar xf ../alpine-minirootfs.tar.gz"
    cp /etc/resolv.conf tmp/etc/resolv.conf
    mv tmp "${ALPINE_FS}"
    proot_exec sh -c "apk update && apk add shadow bash neofetch"
  fi
}

if [ ! -z "$SUDO_USER" ]; then
    case "$1" in
        chroot )
            USER=$SUDO_USER
            unset SUDO_USER
            runuser -u $USER -- $0 --init
            cd $APKMAN_DIR
            enter_chroot
            ;;

        *)
    esac
    exit 0
fi

ensure_apkman_dir
ensure_dependencies
setup_alpine_fs

ensure_apkbuild_prereqs()
{
    PREREQS_CMD="
mkdir -p /apkbuild && cd /apkbuild

if ! test -f packages.done; then
  echo \"Installing apkbuild prerequisites\"
  apk add git runuser build-base alpine-sdk clang gdb bear && touch packages.done
fi

if ! test -f keygen.done; then
  abuild-keygen -an && touch keygen.done
fi

if ! test -f git.config.done; then
  echo \"Configuring git\"
  git config --global user.name \"enclave developer\" && \\
  git config --global user.email \"enclave-dev@unknown.com\" && \\
  touch git.config.done
fi

if ! test -f git.clone.done; then
  echo \"Cloning repo\"
  git clone --depth 1 --branch ${APORTS_BRANCH} git://git.alpinelinux.org/aports && \\
  touch git.clone.done
fi
"
   proot_exec sh -c "$PREREQS_CMD"
}

abuild_prepare()
{
    FLAGS=" -mspeculative-load-hardening -fpic -g -Og -fno-omit-frame-pointer"
    /bin/cat <<EOM >${ALPINE_FS}/apkbuild/prepare.sh
export CC=clang
export CXX=clang++
export CFLAGS="$FLAGS"
export CXXFLAGS="$FLAGS"
if [ -d "/apkbuild/aports/testing/\$1" ]; then
   cd "/apkbuild/aports/testing/\$1"
fi 
if [ -d "/apkbuild/aports/community/\$1" ]; then
   cd "/apkbuild/aports/community/\$1"
fi 
if [ -d "/apkbuild/aports/main/\$1" ]; then
   cd "/apkbuild/aports/main/\$1"
fi 
abuild -F checksum
abuild -F deps
abuild -F unpack
abuild -F prepare
EOM
    proot_exec sh /apkbuild/prepare.sh "$1"
}
abuild_build()
{
    FLAGS=" -mspeculative-load-hardening -fpic -g -Og -fno-omit-frame-pointer"
    /bin/cat <<EOM >${ALPINE_FS}/apkbuild/build.sh
export CC=clang
export CXX=clang++
export CFLAGS="$FLAGS"
export CXXFLAGS="$FLAGS"
if [ -d "/apkbuild/aports/testing/\$1" ]; then
   cd "/apkbuild/aports/testing/\$1"
fi 
if [ -d "/apkbuild/aports/community/\$1" ]; then
   cd "/apkbuild/aports/community/\$1"
fi 
if [ -d "/apkbuild/aports/main/\$1" ]; then
   cd "/apkbuild/aports/main/\$1"
fi 
bear -- abuild -F -K build
abuild -F -K package
mkdir -p /apkbuild/pkgs
cp -r pkg/\$1/* /apkbuild/pkgs
echo Done!
EOM
    proot_exec sh /apkbuild/build.sh "$1"
}


ROOTFS_PATH="${APKMAN_DIR}/${ALPINE_FS}"
BUILD_LIB="${ROOTFS_PATH}/apkbuild/pkgs/lib"
BUILD_USER_LIB="${ROOTFS_PATH}/apkbuild/pkgs/usr/lib"
USER_LIB="${ROOTFS_PATH}/usr/lib"
LIB="${ROOTFS_PATH}/lib"
GCC_LIB="${ROOTFS_PATH}/lib/gcc/x86_64-alpine-linux-musl/10.2.1"
MUSL_LIB="${ROOTFS_PATH}/usr/x86_64-alpine-linux-musl/lib"

USER_CXX_INCLUDE="${ROOTFS_PATH}/usr/include/c++/10.2.1"
USER_CXX_MUSL_INCLUDE="${USER_CXX_INCLUDE}/x86_64-alpine-linux-musl"
USER_INCLUDE="${ROOTFS_PATH}/usr/include"
BUILD_USER_CXX_INCLUDE="${ROOTFS_PATH}/apkbuild/pkgs/usr/include/c++/10.2.1"
BUILD_USER_INCLUDE="${ROOTFS_PATH}/apkbuild/pkgs/usr/include"

case "$1" in
    "search")
        proot_exec apk $@ -v | sort
        ;;

    "add")
        proot_exec apk $@
        ;;

    "del")
        proot_exec apk $@
        ;;

    "root")
	echo "$ROOTFS_PATH"
	;;

    "build-init")
        ensure_apkbuild_prereqs
        ;;

    "prepare")
        ensure_apkbuild_prereqs
        abuild_prepare "$2"
        ;;

    "build")
        ensure_apkbuild_prereqs
        abuild_build "$2"
        ;;

    "-c")
        shift
        proot_exec sh -c "sh -c $@"
        ;;

    "shell")
        proot_exec sh
        ;;

    "chroot")
	SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
        echo "Using sudo to enter chroot"
	sudo $SCRIPTPATH/apkman chroot
        ;;

    "help")
	print_usage
	;;

    "--init")
        ensure_apkman_dir
        ensure_dependencies
        setup_alpine_fs
        ;;

    *)
	print_usage
	exit 1
	;;
esac
